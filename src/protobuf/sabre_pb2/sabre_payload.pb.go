// Copyright 2018-2020 Cargill Incorporated
// Copyright (C) 2020 Tyson Foods, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: sabre_payload.proto

package sabre_pb2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SabrePayload_Action int32

const (
	SabrePayload_ACTION_UNSET                         SabrePayload_Action = 0
	SabrePayload_CREATE_CONTRACT                      SabrePayload_Action = 1
	SabrePayload_DELETE_CONTRACT                      SabrePayload_Action = 2
	SabrePayload_EXECUTE_CONTRACT                     SabrePayload_Action = 3
	SabrePayload_CREATE_CONTRACT_REGISTRY             SabrePayload_Action = 4
	SabrePayload_DELETE_CONTRACT_REGISTRY             SabrePayload_Action = 5
	SabrePayload_UPDATE_CONTRACT_REGISTRY_OWNERS      SabrePayload_Action = 6
	SabrePayload_CREATE_NAMESPACE_REGISTRY            SabrePayload_Action = 7
	SabrePayload_DELETE_NAMESPACE_REGISTRY            SabrePayload_Action = 8
	SabrePayload_UPDATE_NAMESPACE_REGISTRY_OWNERS     SabrePayload_Action = 9
	SabrePayload_CREATE_NAMESPACE_REGISTRY_PERMISSION SabrePayload_Action = 10
	SabrePayload_DELETE_NAMESPACE_REGISTRY_PERMISSION SabrePayload_Action = 11
	SabrePayload_CREATE_SMART_PERMISSION              SabrePayload_Action = 12
	SabrePayload_UPDATE_SMART_PERMISSION              SabrePayload_Action = 13
	SabrePayload_DELETE_SMART_PERMISSION              SabrePayload_Action = 14
)

// Enum value maps for SabrePayload_Action.
var (
	SabrePayload_Action_name = map[int32]string{
		0:  "ACTION_UNSET",
		1:  "CREATE_CONTRACT",
		2:  "DELETE_CONTRACT",
		3:  "EXECUTE_CONTRACT",
		4:  "CREATE_CONTRACT_REGISTRY",
		5:  "DELETE_CONTRACT_REGISTRY",
		6:  "UPDATE_CONTRACT_REGISTRY_OWNERS",
		7:  "CREATE_NAMESPACE_REGISTRY",
		8:  "DELETE_NAMESPACE_REGISTRY",
		9:  "UPDATE_NAMESPACE_REGISTRY_OWNERS",
		10: "CREATE_NAMESPACE_REGISTRY_PERMISSION",
		11: "DELETE_NAMESPACE_REGISTRY_PERMISSION",
		12: "CREATE_SMART_PERMISSION",
		13: "UPDATE_SMART_PERMISSION",
		14: "DELETE_SMART_PERMISSION",
	}
	SabrePayload_Action_value = map[string]int32{
		"ACTION_UNSET":                         0,
		"CREATE_CONTRACT":                      1,
		"DELETE_CONTRACT":                      2,
		"EXECUTE_CONTRACT":                     3,
		"CREATE_CONTRACT_REGISTRY":             4,
		"DELETE_CONTRACT_REGISTRY":             5,
		"UPDATE_CONTRACT_REGISTRY_OWNERS":      6,
		"CREATE_NAMESPACE_REGISTRY":            7,
		"DELETE_NAMESPACE_REGISTRY":            8,
		"UPDATE_NAMESPACE_REGISTRY_OWNERS":     9,
		"CREATE_NAMESPACE_REGISTRY_PERMISSION": 10,
		"DELETE_NAMESPACE_REGISTRY_PERMISSION": 11,
		"CREATE_SMART_PERMISSION":              12,
		"UPDATE_SMART_PERMISSION":              13,
		"DELETE_SMART_PERMISSION":              14,
	}
)

func (x SabrePayload_Action) Enum() *SabrePayload_Action {
	p := new(SabrePayload_Action)
	*p = x
	return p
}

func (x SabrePayload_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SabrePayload_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sabre_payload_proto_enumTypes[0].Descriptor()
}

func (SabrePayload_Action) Type() protoreflect.EnumType {
	return &file_sabre_payload_proto_enumTypes[0]
}

func (x SabrePayload_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SabrePayload_Action.Descriptor instead.
func (SabrePayload_Action) EnumDescriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{0, 0}
}

type SabrePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                            SabrePayload_Action                      `protobuf:"varint,1,opt,name=action,proto3,enum=SabrePayload_Action" json:"action,omitempty"`
	CreateContract                    *CreateContractAction                    `protobuf:"bytes,2,opt,name=create_contract,json=createContract,proto3" json:"create_contract,omitempty"`
	DeleteContract                    *DeleteContractAction                    `protobuf:"bytes,3,opt,name=delete_contract,json=deleteContract,proto3" json:"delete_contract,omitempty"`
	ExecuteContract                   *ExecuteContractAction                   `protobuf:"bytes,4,opt,name=execute_contract,json=executeContract,proto3" json:"execute_contract,omitempty"`
	CreateContractRegistry            *CreateContractRegistryAction            `protobuf:"bytes,5,opt,name=create_contract_registry,json=createContractRegistry,proto3" json:"create_contract_registry,omitempty"`
	DeleteContractRegistry            *DeleteContractRegistryAction            `protobuf:"bytes,6,opt,name=delete_contract_registry,json=deleteContractRegistry,proto3" json:"delete_contract_registry,omitempty"`
	UpdateContractRegistryOwners      *UpdateContractRegistryOwnersAction      `protobuf:"bytes,7,opt,name=update_contract_registry_owners,json=updateContractRegistryOwners,proto3" json:"update_contract_registry_owners,omitempty"`
	CreateNamespaceRegistry           *CreateNamespaceRegistryAction           `protobuf:"bytes,8,opt,name=create_namespace_registry,json=createNamespaceRegistry,proto3" json:"create_namespace_registry,omitempty"`
	DeleteNamespaceRegistry           *DeleteNamespaceRegistryAction           `protobuf:"bytes,9,opt,name=delete_namespace_registry,json=deleteNamespaceRegistry,proto3" json:"delete_namespace_registry,omitempty"`
	UpdateNamespaceRegistryOwners     *UpdateNamespaceRegistryOwnersAction     `protobuf:"bytes,10,opt,name=update_namespace_registry_owners,json=updateNamespaceRegistryOwners,proto3" json:"update_namespace_registry_owners,omitempty"`
	CreateNamespaceRegistryPermission *CreateNamespaceRegistryPermissionAction `protobuf:"bytes,11,opt,name=create_namespace_registry_permission,json=createNamespaceRegistryPermission,proto3" json:"create_namespace_registry_permission,omitempty"`
	DeleteNamespaceRegistryPermission *DeleteNamespaceRegistryPermissionAction `protobuf:"bytes,12,opt,name=delete_namespace_registry_permission,json=deleteNamespaceRegistryPermission,proto3" json:"delete_namespace_registry_permission,omitempty"`
	CreateSmartPermission             *CreateSmartPermissionAction             `protobuf:"bytes,13,opt,name=create_smart_permission,json=createSmartPermission,proto3" json:"create_smart_permission,omitempty"`
	UpdateSmartPermission             *UpdateSmartPermissionAction             `protobuf:"bytes,14,opt,name=update_smart_permission,json=updateSmartPermission,proto3" json:"update_smart_permission,omitempty"`
	DeleteSmartPermission             *DeleteSmartPermissionAction             `protobuf:"bytes,15,opt,name=delete_smart_permission,json=deleteSmartPermission,proto3" json:"delete_smart_permission,omitempty"`
}

func (x *SabrePayload) Reset() {
	*x = SabrePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabrePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabrePayload) ProtoMessage() {}

func (x *SabrePayload) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabrePayload.ProtoReflect.Descriptor instead.
func (*SabrePayload) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{0}
}

func (x *SabrePayload) GetAction() SabrePayload_Action {
	if x != nil {
		return x.Action
	}
	return SabrePayload_ACTION_UNSET
}

func (x *SabrePayload) GetCreateContract() *CreateContractAction {
	if x != nil {
		return x.CreateContract
	}
	return nil
}

func (x *SabrePayload) GetDeleteContract() *DeleteContractAction {
	if x != nil {
		return x.DeleteContract
	}
	return nil
}

func (x *SabrePayload) GetExecuteContract() *ExecuteContractAction {
	if x != nil {
		return x.ExecuteContract
	}
	return nil
}

func (x *SabrePayload) GetCreateContractRegistry() *CreateContractRegistryAction {
	if x != nil {
		return x.CreateContractRegistry
	}
	return nil
}

func (x *SabrePayload) GetDeleteContractRegistry() *DeleteContractRegistryAction {
	if x != nil {
		return x.DeleteContractRegistry
	}
	return nil
}

func (x *SabrePayload) GetUpdateContractRegistryOwners() *UpdateContractRegistryOwnersAction {
	if x != nil {
		return x.UpdateContractRegistryOwners
	}
	return nil
}

func (x *SabrePayload) GetCreateNamespaceRegistry() *CreateNamespaceRegistryAction {
	if x != nil {
		return x.CreateNamespaceRegistry
	}
	return nil
}

func (x *SabrePayload) GetDeleteNamespaceRegistry() *DeleteNamespaceRegistryAction {
	if x != nil {
		return x.DeleteNamespaceRegistry
	}
	return nil
}

func (x *SabrePayload) GetUpdateNamespaceRegistryOwners() *UpdateNamespaceRegistryOwnersAction {
	if x != nil {
		return x.UpdateNamespaceRegistryOwners
	}
	return nil
}

func (x *SabrePayload) GetCreateNamespaceRegistryPermission() *CreateNamespaceRegistryPermissionAction {
	if x != nil {
		return x.CreateNamespaceRegistryPermission
	}
	return nil
}

func (x *SabrePayload) GetDeleteNamespaceRegistryPermission() *DeleteNamespaceRegistryPermissionAction {
	if x != nil {
		return x.DeleteNamespaceRegistryPermission
	}
	return nil
}

func (x *SabrePayload) GetCreateSmartPermission() *CreateSmartPermissionAction {
	if x != nil {
		return x.CreateSmartPermission
	}
	return nil
}

func (x *SabrePayload) GetUpdateSmartPermission() *UpdateSmartPermissionAction {
	if x != nil {
		return x.UpdateSmartPermission
	}
	return nil
}

func (x *SabrePayload) GetDeleteSmartPermission() *DeleteSmartPermissionAction {
	if x != nil {
		return x.DeleteSmartPermission
	}
	return nil
}

// creates a Contract and updates ContractRegistry with a version entry
type CreateContractAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Inputs   []string `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs  []string `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Contract []byte   `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *CreateContractAction) Reset() {
	*x = CreateContractAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractAction) ProtoMessage() {}

func (x *CreateContractAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractAction.ProtoReflect.Descriptor instead.
func (*CreateContractAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{1}
}

func (x *CreateContractAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContractAction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateContractAction) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreateContractAction) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CreateContractAction) GetContract() []byte {
	if x != nil {
		return x.Contract
	}
	return nil
}

// removes a Contract and removes the version entry from ContractRegistry
type DeleteContractAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteContractAction) Reset() {
	*x = DeleteContractAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContractAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContractAction) ProtoMessage() {}

func (x *DeleteContractAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContractAction.ProtoReflect.Descriptor instead.
func (*DeleteContractAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteContractAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteContractAction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// executes the contract
type ExecuteContractAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Inputs  []string `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs []string `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Payload []byte   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ExecuteContractAction) Reset() {
	*x = ExecuteContractAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteContractAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteContractAction) ProtoMessage() {}

func (x *ExecuteContractAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteContractAction.ProtoReflect.Descriptor instead.
func (*ExecuteContractAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteContractAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteContractAction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExecuteContractAction) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ExecuteContractAction) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ExecuteContractAction) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// creates the ContractRegistry in state with no Versions
type CreateContractRegistryAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Owners []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *CreateContractRegistryAction) Reset() {
	*x = CreateContractRegistryAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractRegistryAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractRegistryAction) ProtoMessage() {}

func (x *CreateContractRegistryAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractRegistryAction.ProtoReflect.Descriptor instead.
func (*CreateContractRegistryAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{4}
}

func (x *CreateContractRegistryAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContractRegistryAction) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

// deletes the ContractRegistry associated with 'name'
// only if it contains no versions
type DeleteContractRegistryAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteContractRegistryAction) Reset() {
	*x = DeleteContractRegistryAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContractRegistryAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContractRegistryAction) ProtoMessage() {}

func (x *DeleteContractRegistryAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContractRegistryAction.ProtoReflect.Descriptor instead.
func (*DeleteContractRegistryAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteContractRegistryAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// updates the owners field in the ContractRegistry associated with 'name'
type UpdateContractRegistryOwnersAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Owners []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *UpdateContractRegistryOwnersAction) Reset() {
	*x = UpdateContractRegistryOwnersAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractRegistryOwnersAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractRegistryOwnersAction) ProtoMessage() {}

func (x *UpdateContractRegistryOwnersAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractRegistryOwnersAction.ProtoReflect.Descriptor instead.
func (*UpdateContractRegistryOwnersAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateContractRegistryOwnersAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateContractRegistryOwnersAction) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

// creates the ContractRegistry in state with no Permissions
type CreateNamespaceRegistryAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Owners    []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *CreateNamespaceRegistryAction) Reset() {
	*x = CreateNamespaceRegistryAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceRegistryAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRegistryAction) ProtoMessage() {}

func (x *CreateNamespaceRegistryAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRegistryAction.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRegistryAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{7}
}

func (x *CreateNamespaceRegistryAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateNamespaceRegistryAction) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

// deletes the NamespaceRegistry associated with 'namespace'
// only if it contains no permissions
type DeleteNamespaceRegistryAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteNamespaceRegistryAction) Reset() {
	*x = DeleteNamespaceRegistryAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceRegistryAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRegistryAction) ProtoMessage() {}

func (x *DeleteNamespaceRegistryAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRegistryAction.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRegistryAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteNamespaceRegistryAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// updates the owners field in the NamespaceRegistry associated with 'namespace'
type UpdateNamespaceRegistryOwnersAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Owners    []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *UpdateNamespaceRegistryOwnersAction) Reset() {
	*x = UpdateNamespaceRegistryOwnersAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceRegistryOwnersAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceRegistryOwnersAction) ProtoMessage() {}

func (x *UpdateNamespaceRegistryOwnersAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceRegistryOwnersAction.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceRegistryOwnersAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNamespaceRegistryOwnersAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateNamespaceRegistryOwnersAction) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

// adds a permission entry to the NamespaceRegistry associated with 'namespace'
type CreateNamespaceRegistryPermissionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	Read         bool   `protobuf:"varint,3,opt,name=read,proto3" json:"read,omitempty"`
	Write        bool   `protobuf:"varint,4,opt,name=write,proto3" json:"write,omitempty"`
}

func (x *CreateNamespaceRegistryPermissionAction) Reset() {
	*x = CreateNamespaceRegistryPermissionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceRegistryPermissionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRegistryPermissionAction) ProtoMessage() {}

func (x *CreateNamespaceRegistryPermissionAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRegistryPermissionAction.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRegistryPermissionAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{10}
}

func (x *CreateNamespaceRegistryPermissionAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateNamespaceRegistryPermissionAction) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *CreateNamespaceRegistryPermissionAction) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *CreateNamespaceRegistryPermissionAction) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

// removes a permission entry to the NamespaceRegistry associated with
// 'namespace'
type DeleteNamespaceRegistryPermissionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
}

func (x *DeleteNamespaceRegistryPermissionAction) Reset() {
	*x = DeleteNamespaceRegistryPermissionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceRegistryPermissionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRegistryPermissionAction) ProtoMessage() {}

func (x *DeleteNamespaceRegistryPermissionAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRegistryPermissionAction.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRegistryPermissionAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteNamespaceRegistryPermissionAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteNamespaceRegistryPermissionAction) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

// Creates a smart permission
type CreateSmartPermissionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of organization that owns the smart permission
	OrgId    string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Function []byte `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *CreateSmartPermissionAction) Reset() {
	*x = CreateSmartPermissionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSmartPermissionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmartPermissionAction) ProtoMessage() {}

func (x *CreateSmartPermissionAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmartPermissionAction.ProtoReflect.Descriptor instead.
func (*CreateSmartPermissionAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{12}
}

func (x *CreateSmartPermissionAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSmartPermissionAction) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CreateSmartPermissionAction) GetFunction() []byte {
	if x != nil {
		return x.Function
	}
	return nil
}

// Updates a smart permission
type UpdateSmartPermissionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of organization that owns the smart permission
	OrgId    string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Function []byte `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *UpdateSmartPermissionAction) Reset() {
	*x = UpdateSmartPermissionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSmartPermissionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmartPermissionAction) ProtoMessage() {}

func (x *UpdateSmartPermissionAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmartPermissionAction.ProtoReflect.Descriptor instead.
func (*UpdateSmartPermissionAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSmartPermissionAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSmartPermissionAction) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateSmartPermissionAction) GetFunction() []byte {
	if x != nil {
		return x.Function
	}
	return nil
}

// Deletes  a smart permission
type DeleteSmartPermissionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of organization that owns the smart permission
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DeleteSmartPermissionAction) Reset() {
	*x = DeleteSmartPermissionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sabre_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSmartPermissionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmartPermissionAction) ProtoMessage() {}

func (x *DeleteSmartPermissionAction) ProtoReflect() protoreflect.Message {
	mi := &file_sabre_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmartPermissionAction.ProtoReflect.Descriptor instead.
func (*DeleteSmartPermissionAction) Descriptor() ([]byte, []int) {
	return file_sabre_payload_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteSmartPermissionAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSmartPermissionAction) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

var File_sabre_payload_proto protoreflect.FileDescriptor

var file_sabre_payload_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x61, 0x62, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x0e, 0x0a, 0x0c, 0x53, 0x61, 0x62, 0x72, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x53, 0x61, 0x62, 0x72, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x57, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x1f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x5a, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x6d, 0x0a,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x79, 0x0a, 0x24,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x24, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x21, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54,
	0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10,
	0x07, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x08,
	0x12, 0x24, 0x0a, 0x20, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x53, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0a,
	0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53,
	0x4d, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x0e, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x4a, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x32, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x50, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0x55, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x6c,
	0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x42, 0x0b, 0x5a, 0x09, 0x73, 0x61, 0x62, 0x72, 0x65, 0x5f, 0x70, 0x62, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sabre_payload_proto_rawDescOnce sync.Once
	file_sabre_payload_proto_rawDescData = file_sabre_payload_proto_rawDesc
)

func file_sabre_payload_proto_rawDescGZIP() []byte {
	file_sabre_payload_proto_rawDescOnce.Do(func() {
		file_sabre_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_sabre_payload_proto_rawDescData)
	})
	return file_sabre_payload_proto_rawDescData
}

var file_sabre_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sabre_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_sabre_payload_proto_goTypes = []interface{}{
	(SabrePayload_Action)(0),                        // 0: SabrePayload.Action
	(*SabrePayload)(nil),                            // 1: SabrePayload
	(*CreateContractAction)(nil),                    // 2: CreateContractAction
	(*DeleteContractAction)(nil),                    // 3: DeleteContractAction
	(*ExecuteContractAction)(nil),                   // 4: ExecuteContractAction
	(*CreateContractRegistryAction)(nil),            // 5: CreateContractRegistryAction
	(*DeleteContractRegistryAction)(nil),            // 6: DeleteContractRegistryAction
	(*UpdateContractRegistryOwnersAction)(nil),      // 7: UpdateContractRegistryOwnersAction
	(*CreateNamespaceRegistryAction)(nil),           // 8: CreateNamespaceRegistryAction
	(*DeleteNamespaceRegistryAction)(nil),           // 9: DeleteNamespaceRegistryAction
	(*UpdateNamespaceRegistryOwnersAction)(nil),     // 10: UpdateNamespaceRegistryOwnersAction
	(*CreateNamespaceRegistryPermissionAction)(nil), // 11: CreateNamespaceRegistryPermissionAction
	(*DeleteNamespaceRegistryPermissionAction)(nil), // 12: DeleteNamespaceRegistryPermissionAction
	(*CreateSmartPermissionAction)(nil),             // 13: CreateSmartPermissionAction
	(*UpdateSmartPermissionAction)(nil),             // 14: UpdateSmartPermissionAction
	(*DeleteSmartPermissionAction)(nil),             // 15: DeleteSmartPermissionAction
}
var file_sabre_payload_proto_depIdxs = []int32{
	0,  // 0: SabrePayload.action:type_name -> SabrePayload.Action
	2,  // 1: SabrePayload.create_contract:type_name -> CreateContractAction
	3,  // 2: SabrePayload.delete_contract:type_name -> DeleteContractAction
	4,  // 3: SabrePayload.execute_contract:type_name -> ExecuteContractAction
	5,  // 4: SabrePayload.create_contract_registry:type_name -> CreateContractRegistryAction
	6,  // 5: SabrePayload.delete_contract_registry:type_name -> DeleteContractRegistryAction
	7,  // 6: SabrePayload.update_contract_registry_owners:type_name -> UpdateContractRegistryOwnersAction
	8,  // 7: SabrePayload.create_namespace_registry:type_name -> CreateNamespaceRegistryAction
	9,  // 8: SabrePayload.delete_namespace_registry:type_name -> DeleteNamespaceRegistryAction
	10, // 9: SabrePayload.update_namespace_registry_owners:type_name -> UpdateNamespaceRegistryOwnersAction
	11, // 10: SabrePayload.create_namespace_registry_permission:type_name -> CreateNamespaceRegistryPermissionAction
	12, // 11: SabrePayload.delete_namespace_registry_permission:type_name -> DeleteNamespaceRegistryPermissionAction
	13, // 12: SabrePayload.create_smart_permission:type_name -> CreateSmartPermissionAction
	14, // 13: SabrePayload.update_smart_permission:type_name -> UpdateSmartPermissionAction
	15, // 14: SabrePayload.delete_smart_permission:type_name -> DeleteSmartPermissionAction
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_sabre_payload_proto_init() }
func file_sabre_payload_proto_init() {
	if File_sabre_payload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sabre_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabrePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContractAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteContractAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractRegistryAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContractRegistryAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractRegistryOwnersAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceRegistryAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceRegistryAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceRegistryOwnersAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceRegistryPermissionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceRegistryPermissionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSmartPermissionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSmartPermissionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sabre_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSmartPermissionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sabre_payload_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sabre_payload_proto_goTypes,
		DependencyIndexes: file_sabre_payload_proto_depIdxs,
		EnumInfos:         file_sabre_payload_proto_enumTypes,
		MessageInfos:      file_sabre_payload_proto_msgTypes,
	}.Build()
	File_sabre_payload_proto = out.File
	file_sabre_payload_proto_rawDesc = nil
	file_sabre_payload_proto_goTypes = nil
	file_sabre_payload_proto_depIdxs = nil
}
